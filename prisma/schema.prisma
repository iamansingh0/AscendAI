// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  clerkUserId   String   @unique
  email         String   @unique
  name          String?
  imageUrl      String?
  industry      String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // profile fields
  bio           String?
  experience    Int?
  skills        String[]

  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     
  questions     Json[]    // arrsy of {question, answer, userAnswer, isCorrect}
  category      String
  improvementTip String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  content       String    @db.Text // markdown
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CoverLetter {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  content           String    // markdown
  jobDescription    String?
  companyName       String
  jobTitle          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt  

  @@index([userId])
}

model IndustryInsight {
  id             String       @id @default(cuid())
  industry       String       @unique
  // users in this industry
  users          User[]

  // salary data
  salaryRanges   Json[]       // Array of {role: string, min: float, max: float, median: float, location: string?}

  // industry trends
  growthRate     Float        // Industry Growth Rate
  demandLevel    DemandLevel       // "High", "Medium", "Low"
  topSkills      String[]     // most in-demand skills

  // market conditions
  marketOutlook  MarketOutlook       // positive, neutral, negative
  keyTrends      String[]

  // learning suggetions
  recommendedSkills String[]

  lastUpdated    DateTime     @default(now())
  nextUpdate     DateTime     // scheduled update time

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}